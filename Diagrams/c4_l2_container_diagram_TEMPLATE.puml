@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include FONTAWESOME/users.puml

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="microservice\height sided")
AddElementTag("storage", $shape = RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")
AddRelTag(aggregate_root, $lineColor="red")

LAYOUT_TOP_DOWN()
'LAYOUT_WITH_LEGEND()
SHOW_PERSON_OUTLINE()
'HIDE_STEREOTYPE()

title Container Diagram for Car DealerShip System

Person(employee, "Employee", "Employee of the car dealership")
System_Boundary(carDealership, "Car Dealership System") {
    Container(webApp, "Web Application", "JavaScript, React", "Delivers the Static content and the car dealership single page application")
    Container(singlepage_app, "Single-Page Application", "JavaScript, React", "Provides the car dealership functionality to employees via their browsers")

    Container(api_gateway, "API Gateway", "Java, Spring Boot", "Provides car dealership functionality via JSON/REST HTTPS APIs")

    Container(purchases_service, "purchases-service", "Java, Spring Boot", "Provides purchases functionality via JSON/REST HTTPS APIs", $tags="microService")
    Container(inventory_service, "inventory-service", "Java, Spring Boot", "Provides inventory functionality via JSON/REST HTTPS APIs", $tags="microService")
    Container(employees_service, "employees-service", "Java, Spring Boot", "Provides employee functionality via JSON/REST HTTPS APIs", $tags="microService")
    Container(customers_service, "customers-service", "Java, Spring Boot", "Provides customer functionality via JSON/REST HTTPS APIs", $tags="microService")

    Container(purchases_db, "purchases DB", "Mongo DB", "Stores purchases information", $tags = "storage")
    Container(inventory_db, "inventory DB", "Postgres", "Stores inventory information", $tags = "storage")
    Container(employees_db, "employees DB", "MySQL 5.5.x", "Stores employee information", $tags = "storage")
    Container(customers_db, "customers DB", "MySQL 5.5.x", "Stores customer information", $tags = "storage")

    Rel(employee, webApp, "Visits cardealership.com using", "HTTPS")
    Rel_R(webApp, singlepage_app, "Delivers to the employee's browser", "HTTPS")
    Rel(employee, singlepage_app, "Views inventory and tracks purchases using", "HTTPS")
    Rel(singlepage_app, api_gateway, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, customers_service, "Maks API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, employees_service, "Maks API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, inventory_service, "Maks API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, purchases_service, "Maks API calls to", "JSON/REST/HTTPS")

    Rel(purchases_service, customers_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="aggregate_root")
    Rel(purchases_service, inventory_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="aggregate_root")
    Rel(purchases_service, employees_service, "Makes API calls to", "JSON/REST/HTTPS", $tags="aggregate_root")

    Rel_D(customers_service, customers_db, "Reads from and writes to", "JDBC")
    Rel_D(employees_service, employees_db, "Reads from and writes to", "JDBC")
    Rel_D(inventory_service, inventory_db, "Reads from and writes to", "JDBC")
    Rel_R(purchases_service, purchases_db, "Reads from and writes to", "Mongo")
}

@enduml